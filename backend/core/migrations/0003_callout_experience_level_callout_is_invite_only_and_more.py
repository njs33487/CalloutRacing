# Generated by Django 5.2.3 on 2025-06-28 02:02

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0002_contactsubmission_remove_eventparticipant_notes_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='callout',
            name='experience_level',
            field=models.CharField(blank=True, choices=[('beginner', 'Beginner Friendly'), ('intermediate', 'Intermediate'), ('experienced', 'Experienced Only'), ('pro', 'Professional')], help_text='Required experience level', max_length=20),
        ),
        migrations.AddField(
            model_name='callout',
            name='is_invite_only',
            field=models.BooleanField(default=False, help_text='Whether this requires an invitation'),
        ),
        migrations.AddField(
            model_name='callout',
            name='is_private',
            field=models.BooleanField(default=False, help_text='Whether this is a private callout'),
        ),
        migrations.AddField(
            model_name='callout',
            name='max_horsepower',
            field=models.IntegerField(blank=True, help_text='Maximum horsepower allowed', null=True),
        ),
        migrations.AddField(
            model_name='callout',
            name='min_horsepower',
            field=models.IntegerField(blank=True, help_text='Minimum horsepower required', null=True),
        ),
        migrations.AddField(
            model_name='callout',
            name='rules',
            field=models.TextField(blank=True, help_text='Specific rules for this race'),
        ),
        migrations.AddField(
            model_name='callout',
            name='tire_requirement',
            field=models.CharField(blank=True, help_text='Tire requirements', max_length=50),
        ),
        migrations.AlterField(
            model_name='callout',
            name='location_type',
            field=models.CharField(choices=[('track', 'Track'), ('street', 'Street'), ('hot_spot', 'Hot Spot')], help_text='Type of location for the race', max_length=20),
        ),
        migrations.AlterField(
            model_name='callout',
            name='race_type',
            field=models.CharField(choices=[('quarter_mile', 'Quarter Mile'), ('eighth_mile', 'Eighth Mile'), ('roll_race', 'Roll Race'), ('dig_race', 'Dig Race'), ('heads_up', 'Heads Up'), ('bracket', 'Bracket Race')], help_text='Type of race', max_length=50),
        ),
        migrations.CreateModel(
            name='ChallengeResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('interested', 'Interested'), ('accepted', 'Accepted'), ('declined', 'Declined')], default='interested', max_length=20)),
                ('message', models.TextField(blank=True, help_text='Response message')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('responder', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_responses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HotSpot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the hot spot', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of the location')),
                ('address', models.CharField(help_text='Full address', max_length=500)),
                ('city', models.CharField(help_text='City', max_length=100)),
                ('state', models.CharField(help_text='State', max_length=50)),
                ('zip_code', models.CharField(help_text='ZIP code', max_length=20)),
                ('latitude', models.DecimalField(decimal_places=6, help_text='Latitude coordinate', max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, help_text='Longitude coordinate', max_digits=9)),
                ('spot_type', models.CharField(choices=[('track', 'Official Track'), ('street_meet', 'Street Meet Point'), ('parking_lot', 'Parking Lot'), ('industrial', 'Industrial Area'), ('other', 'Other')], help_text='Type of racing location', max_length=20)),
                ('rules', models.TextField(blank=True, help_text='Specific rules for this location')),
                ('amenities', models.TextField(blank=True, help_text='Available amenities')),
                ('peak_hours', models.CharField(blank=True, help_text="Typical peak hours (e.g., 'Friday 8PM-12AM')", max_length=100)),
                ('is_verified', models.BooleanField(default=False, help_text='Whether this is a verified official location')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this hot spot is currently active')),
                ('total_races', models.IntegerField(default=0, help_text='Total number of races held here')),
                ('last_activity', models.DateTimeField(blank=True, help_text='Last known activity at this location', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_hotspots', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-is_verified', '-total_races', 'name'],
            },
        ),
        migrations.AddField(
            model_name='callout',
            name='hot_spot',
            field=models.ForeignKey(blank=True, help_text='Hot spot for the race (optional)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='callouts', to='core.hotspot'),
        ),
        migrations.CreateModel(
            name='LocationBroadcast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('address', models.CharField(blank=True, max_length=500)),
                ('message', models.CharField(blank=True, help_text="Optional message (e.g., 'Looking for a race!')", max_length=200)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this broadcast is currently active')),
                ('expires_at', models.DateTimeField(help_text='When this broadcast expires')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('hot_spot', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='broadcasts', to='core.hotspot')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location_broadcasts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OpenChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Challenge title', max_length=200)),
                ('description', models.TextField(help_text='Detailed description of the challenge')),
                ('challenge_type', models.CharField(choices=[('street', 'Street Race'), ('track', 'Track Race'), ('roll_race', 'Roll Race'), ('dig_race', 'Dig Race'), ('meetup', 'Meetup')], help_text='Type of challenge', max_length=20)),
                ('max_horsepower', models.IntegerField(blank=True, help_text='Maximum horsepower allowed', null=True)),
                ('min_horsepower', models.IntegerField(blank=True, help_text='Minimum horsepower required', null=True)),
                ('tire_requirement', models.CharField(blank=True, help_text="Tire requirements (e.g., 'street tires only')", max_length=50)),
                ('location', models.CharField(help_text='General location or area', max_length=500)),
                ('scheduled_date', models.DateTimeField(blank=True, help_text='When the challenge is scheduled', null=True)),
                ('rules', models.TextField(blank=True, help_text='Specific rules for this challenge')),
                ('stakes', models.CharField(blank=True, help_text="What's at stake (e.g., 'winner buys pizza')", max_length=200)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this challenge is still open')),
                ('max_participants', models.IntegerField(blank=True, help_text='Maximum number of participants', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('challenger', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='open_challenges', to=settings.AUTH_USER_MODEL)),
                ('hot_spot', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='open_challenges', to='core.hotspot')),
                ('responses', models.ManyToManyField(related_name='responded_challenges', through='core.ChallengeResponse', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='challengeresponse',
            name='challenge',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_responses', to='core.openchallenge'),
        ),
        migrations.CreateModel(
            name='RacingCrew',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the crew/club', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of the crew')),
                ('crew_type', models.CharField(choices=[('car_club', 'Car Club'), ('racing_crew', 'Racing Crew'), ('friend_group', 'Friend Group'), ('team', 'Racing Team')], help_text='Type of crew', max_length=20)),
                ('is_private', models.BooleanField(default=True, help_text='Whether this crew is private')),
                ('is_invite_only', models.BooleanField(default=True, help_text='Whether membership is by invitation only')),
                ('member_count', models.IntegerField(default=0, help_text='Number of members')),
                ('total_races', models.IntegerField(default=0, help_text='Total races organized by this crew')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('admins', models.ManyToManyField(blank=True, related_name='admin_crews', to=settings.AUTH_USER_MODEL)),
                ('members', models.ManyToManyField(blank=True, related_name='member_crews', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_crews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-member_count', 'name'],
            },
        ),
        migrations.AddField(
            model_name='callout',
            name='crew',
            field=models.ForeignKey(blank=True, help_text='Associated crew (optional)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='callouts', to='core.racingcrew'),
        ),
        migrations.AlterUniqueTogether(
            name='challengeresponse',
            unique_together={('challenge', 'responder')},
        ),
        migrations.CreateModel(
            name='CrewMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('active', 'Active'), ('banned', 'Banned')], default='pending', max_length=20)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('invited_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='crew_invites_sent', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crew_memberships', to=settings.AUTH_USER_MODEL)),
                ('crew', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='core.racingcrew')),
            ],
            options={
                'ordering': ['-joined_at'],
                'unique_together': {('crew', 'user')},
            },
        ),
        migrations.CreateModel(
            name='ReputationRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('punctuality', models.IntegerField(help_text='Punctuality rating (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('rule_adherence', models.IntegerField(help_text='Rule adherence rating (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('sportsmanship', models.IntegerField(help_text='Sportsmanship rating (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('overall', models.IntegerField(help_text='Overall rating (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(blank=True, help_text='Optional comment about the experience')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('callout', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='core.callout')),
                ('rated_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings_received', to=settings.AUTH_USER_MODEL)),
                ('rater', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings_given', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('rater', 'rated_user', 'callout')},
            },
        ),
    ]
