# Generated by Django 5.2.3 on 2025-06-28 14:22

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BuildBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('icon', models.ImageField(upload_to='badge_icons/')),
                ('criteria', models.TextField()),
                ('badge_type', models.CharField(max_length=20)),
                ('is_automatic', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ContactSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Contact person's name", max_length=100)),
                ('email', models.EmailField(help_text="Contact person's email", max_length=254)),
                ('subject', models.CharField(help_text='Subject of the inquiry', max_length=200)),
                ('message', models.TextField(help_text='Contact message content')),
                ('is_reviewed', models.BooleanField(default=False, help_text='Whether admin has reviewed this submission')),
                ('is_responded', models.BooleanField(default=False, help_text='Whether admin has responded to this submission')),
                ('admin_notes', models.TextField(blank=True, help_text='Admin notes about this submission')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the submission was received')),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='When admin reviewed this submission', null=True)),
                ('responded_at', models.DateTimeField(blank=True, help_text='When admin responded to this submission', null=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Track',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Track name', max_length=200)),
                ('location', models.CharField(help_text='Track location', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Track description')),
                ('track_type', models.CharField(choices=[('drag', 'Drag Strip'), ('road_course', 'Road Course'), ('oval', 'Oval Track'), ('street', 'Street Circuit')], help_text='Type of track', max_length=50)),
                ('surface_type', models.CharField(choices=[('asphalt', 'Asphalt'), ('concrete', 'Concrete'), ('dirt', 'Dirt'), ('mixed', 'Mixed')], help_text='Track surface type', max_length=50)),
                ('length', models.DecimalField(blank=True, decimal_places=2, help_text='Track length in miles', max_digits=6, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether track is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email_verified', models.BooleanField(default=False, help_text='Whether email has been verified')),
                ('email_verification_token', models.UUIDField(null=True, blank=True, unique=True, help_text='Token for email verification')),
                ('email_verification_sent_at', models.DateTimeField(blank=True, help_text='When verification email was sent', null=True)),
                ('email_verification_expires_at', models.DateTimeField(blank=True, help_text='When verification token expires', null=True)),
                ('email', models.EmailField(help_text="User's email address", max_length=254, unique=True)),
                ('username', models.CharField(help_text='Username (can be email format)', max_length=150, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BuildLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('is_complete', models.BooleanField(default=False)),
                ('start_date', models.DateField()),
                ('completion_date', models.DateField(blank=True, null=True)),
                ('total_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('target_horsepower', models.IntegerField(blank=True, null=True)),
                ('target_quarter_mile', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
                ('is_public', models.BooleanField(default=True)),
                ('allow_comments', models.BooleanField(default=True)),
                ('allow_ratings', models.BooleanField(default=True)),
                ('views', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_builds', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='BuildMilestone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('category', models.CharField(max_length=50)),
                ('is_complete', models.BooleanField(default=False)),
                ('start_date', models.DateField()),
                ('completion_date', models.DateField(blank=True, null=True)),
                ('cost', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('hours_spent', models.DecimalField(blank=True, decimal_places=1, max_digits=6, null=True)),
                ('horsepower_gain', models.IntegerField(blank=True, null=True)),
                ('torque_gain', models.IntegerField(blank=True, null=True)),
                ('weight_change', models.IntegerField(blank=True, null=True)),
                ('parts_used', models.TextField(blank=True)),
                ('part_numbers', models.TextField(blank=True)),
                ('difficulty_level', models.CharField(blank=True, max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('build_log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='milestones', to='core.buildlog')),
            ],
            options={
                'ordering': ['start_date'],
            },
        ),
        migrations.CreateModel(
            name='BuildMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('media_type', models.CharField(choices=[('photo', 'Photo'), ('video', 'Video'), ('audio', 'Audio'), ('document', 'Document')], max_length=20)),
                ('file', models.FileField(upload_to='build_media/')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='build_thumbnails/')),
                ('title', models.CharField(blank=True, max_length=200)),
                ('caption', models.TextField(blank=True)),
                ('is_primary', models.BooleanField(default=False)),
                ('file_size', models.IntegerField(blank=True, null=True)),
                ('duration', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('build_log', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='media', to='core.buildlog')),
                ('milestone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='media', to='core.buildmilestone')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BuildWishlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('category', models.CharField(max_length=50)),
                ('brand', models.CharField(blank=True, max_length=100)),
                ('part_number', models.CharField(blank=True, max_length=100)),
                ('estimated_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('priority', models.CharField(default='medium', max_length=20)),
                ('is_public', models.BooleanField(default=True)),
                ('is_acquired', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('build_log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlist_items', to='core.buildlog')),
            ],
            options={
                'ordering': ['priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CarProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Car name', max_length=100)),
                ('make', models.CharField(help_text='Car make', max_length=50)),
                ('model', models.CharField(help_text='Car model', max_length=50)),
                ('year', models.IntegerField(help_text='Car year')),
                ('trim', models.CharField(blank=True, help_text='Car trim', max_length=100)),
                ('color', models.CharField(blank=True, help_text='Car color', max_length=50)),
                ('vin', models.CharField(blank=True, help_text='Vehicle identification number', max_length=17)),
                ('engine_size', models.DecimalField(blank=True, decimal_places=1, help_text='Engine size in liters', max_digits=4, null=True)),
                ('engine_type', models.CharField(blank=True, help_text='Engine type', max_length=50)),
                ('fuel_type', models.CharField(choices=[('gasoline', 'Gasoline'), ('diesel', 'Diesel'), ('electric', 'Electric'), ('hybrid', 'Hybrid')], default='gasoline', help_text='Fuel type', max_length=20)),
                ('horsepower', models.IntegerField(blank=True, help_text='Horsepower', null=True)),
                ('torque', models.IntegerField(blank=True, help_text='Torque', null=True)),
                ('weight', models.IntegerField(blank=True, help_text='Weight in pounds', null=True)),
                ('transmission', models.CharField(blank=True, help_text='Transmission type', max_length=50)),
                ('drivetrain', models.CharField(blank=True, choices=[('fwd', 'Front-Wheel Drive'), ('rwd', 'Rear-Wheel Drive'), ('awd', 'All-Wheel Drive'), ('4wd', 'Four-Wheel Drive')], help_text='Drivetrain type', max_length=20)),
                ('best_quarter_mile', models.DecimalField(blank=True, decimal_places=3, help_text='Best quarter mile time', max_digits=6, null=True)),
                ('best_eighth_mile', models.DecimalField(blank=True, decimal_places=3, help_text='Best eighth mile time', max_digits=6, null=True)),
                ('best_trap_speed', models.DecimalField(blank=True, decimal_places=1, help_text='Best trap speed', max_digits=5, null=True)),
                ('description', models.TextField(blank=True, help_text='Car description')),
                ('is_primary', models.BooleanField(default=False, help_text='Whether this is the primary car')),
                ('is_active', models.BooleanField(default=True, help_text='Whether car profile is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cars', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-is_primary', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CarModification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('engine', 'Engine'), ('exhaust', 'Exhaust'), ('intake', 'Intake'), ('turbo', 'Turbo/Supercharger'), ('suspension', 'Suspension'), ('wheels', 'Wheels & Tires'), ('brakes', 'Brakes'), ('interior', 'Interior'), ('exterior', 'Exterior'), ('electronics', 'Electronics'), ('other', 'Other')], help_text='Modification category', max_length=20)),
                ('name', models.CharField(help_text='Modification name', max_length=200)),
                ('brand', models.CharField(blank=True, help_text='Brand name', max_length=100)),
                ('part_number', models.CharField(blank=True, help_text='Part number', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Modification description')),
                ('cost', models.DecimalField(blank=True, decimal_places=2, help_text='Modification cost', max_digits=8, null=True)),
                ('installed_date', models.DateField(blank=True, help_text='Installation date', null=True)),
                ('is_installed', models.BooleanField(default=True, help_text='Whether modification is installed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modifications', to='core.carprofile')),
            ],
            options={
                'ordering': ['-installed_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CarImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Car image', upload_to='car_images/')),
                ('caption', models.CharField(blank=True, help_text='Image caption', max_length=200)),
                ('is_primary', models.BooleanField(default=False, help_text='Whether this is the primary image')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='core.carprofile')),
            ],
            options={
                'ordering': ['-is_primary', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='buildlog',
            name='car',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='build_logs', to='core.carprofile'),
        ),
        migrations.CreateModel(
            name='CarTour',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('tour_type', models.CharField(max_length=20)),
                ('primary_media', models.FileField(upload_to='car_tours/')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='tour_thumbnails/')),
                ('is_public', models.BooleanField(default=True)),
                ('allow_comments', models.BooleanField(default=True)),
                ('views', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tours', to='core.carprofile')),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_tours', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BuildComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('comment_type', models.CharField(default='general', max_length=20)),
                ('is_approved', models.BooleanField(default=True)),
                ('is_flagged', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_build_comments', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='core.buildcomment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='build_comments', to=settings.AUTH_USER_MODEL)),
                ('build_log', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='core.buildlog')),
                ('milestone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='core.buildmilestone')),
                ('tour', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='core.cartour')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Event title', max_length=200)),
                ('description', models.TextField(help_text='Event description')),
                ('event_type', models.CharField(choices=[('race', 'Race Event'), ('meet', 'Car Meet'), ('show', 'Car Show'), ('test', 'Test & Tune')], help_text='Type of event', max_length=50)),
                ('start_date', models.DateTimeField(help_text='Event start date and time')),
                ('end_date', models.DateTimeField(help_text='Event end date and time')),
                ('max_participants', models.IntegerField(blank=True, help_text='Maximum number of participants', null=True)),
                ('entry_fee', models.DecimalField(decimal_places=2, default=0, help_text='Entry fee', max_digits=8)),
                ('is_public', models.BooleanField(default=True, help_text='Whether event is public')),
                ('is_active', models.BooleanField(default=True, help_text='Whether event is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organized_events', to=settings.AUTH_USER_MODEL)),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='core.track')),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Callout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location_type', models.CharField(choices=[('track', 'Track'), ('street', 'Street')], help_text='Type of racing location', max_length=20)),
                ('street_location', models.CharField(blank=True, help_text='Street location if applicable', max_length=200)),
                ('race_type', models.CharField(choices=[('quarter_mile', 'Quarter Mile'), ('eighth_mile', 'Eighth Mile'), ('roll_race', 'Roll Race'), ('dig_race', 'Dig Race')], help_text='Type of race', max_length=50)),
                ('wager_amount', models.DecimalField(decimal_places=2, default=0, help_text='Wager amount', max_digits=8)),
                ('message', models.TextField(blank=True, help_text='Callout message')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', help_text='Callout status', max_length=20)),
                ('scheduled_date', models.DateTimeField(blank=True, help_text='Scheduled race date', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('challenged', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_callouts', to=settings.AUTH_USER_MODEL)),
                ('challenger', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_callouts', to=settings.AUTH_USER_MODEL)),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='won_races', to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='callouts', to='core.event')),
                ('track', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='callouts', to='core.track')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BettingPool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Pool name', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Pool description')),
                ('total_pool', models.DecimalField(decimal_places=2, default=0, help_text='Total pool amount', max_digits=10)),
                ('is_active', models.BooleanField(default=True, help_text='Whether pool is active')),
                ('is_settled', models.BooleanField(default=False, help_text='Whether pool is settled')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('callout', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='betting_pools', to='core.callout')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='betting_pools', to='core.event')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Bet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bet_type', models.CharField(choices=[('callout', 'Callout'), ('event', 'Event'), ('other', 'Other')], help_text='Bet type', max_length=20)),
                ('bet_amount', models.DecimalField(decimal_places=2, help_text='Bet amount', max_digits=8)),
                ('odds', models.DecimalField(decimal_places=2, help_text='Betting odds', max_digits=5)),
                ('potential_payout', models.DecimalField(decimal_places=2, help_text='Potential payout', max_digits=8)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('won', 'Won'), ('lost', 'Lost'), ('cancelled', 'Cancelled')], default='pending', help_text='Bet status', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bettor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bets', to=settings.AUTH_USER_MODEL)),
                ('callout', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bets', to='core.callout')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bets', to='core.event')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HotSpot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the hot spot', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Description of the location')),
                ('address', models.CharField(help_text='Full address', max_length=500)),
                ('city', models.CharField(help_text='City', max_length=100)),
                ('state', models.CharField(help_text='State', max_length=50)),
                ('zip_code', models.CharField(help_text='ZIP code', max_length=20)),
                ('latitude', models.DecimalField(decimal_places=6, help_text='Latitude coordinate', max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, help_text='Longitude coordinate', max_digits=9)),
                ('spot_type', models.CharField(choices=[('track', 'Official Track'), ('street_meet', 'Street Meet Point'), ('parking_lot', 'Parking Lot'), ('industrial', 'Industrial Area'), ('other', 'Other')], help_text='Type of racing location', max_length=20)),
                ('rules', models.TextField(blank=True, help_text='Specific rules for this location')),
                ('amenities', models.TextField(blank=True, help_text='Available amenities')),
                ('peak_hours', models.CharField(blank=True, help_text="Typical peak hours (e.g., 'Friday 8PM-12AM')", max_length=100)),
                ('is_verified', models.BooleanField(default=False, help_text='Whether this is a verified official location')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this hot spot is currently active')),
                ('total_races', models.IntegerField(default=0, help_text='Total number of races held here')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_hotspots', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='LocationBroadcast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.CharField(help_text='Current location', max_length=200)),
                ('latitude', models.DecimalField(decimal_places=6, help_text='Latitude coordinate', max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, help_text='Longitude coordinate', max_digits=9)),
                ('message', models.TextField(blank=True, help_text='Optional message')),
                ('is_active', models.BooleanField(default=True, help_text='Whether broadcast is active')),
                ('expires_at', models.DateTimeField(help_text='When broadcast expires')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location_broadcasts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Marketplace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Listing title', max_length=200)),
                ('description', models.TextField(help_text='Listing description')),
                ('category', models.CharField(choices=[('car', 'Car'), ('parts', 'Parts'), ('wheels', 'Wheels & Tires'), ('electronics', 'Electronics'), ('tools', 'Tools'), ('other', 'Other')], help_text='Listing category', max_length=50)),
                ('condition', models.CharField(choices=[('new', 'New'), ('like_new', 'Like New'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor')], help_text='Item condition', max_length=20)),
                ('price', models.DecimalField(decimal_places=2, help_text='Item price', max_digits=10)),
                ('is_negotiable', models.BooleanField(default=True, help_text='Whether price is negotiable')),
                ('trade_offered', models.BooleanField(default=False, help_text='Whether trade is offered')),
                ('trade_description', models.TextField(blank=True, help_text='Trade description')),
                ('location', models.CharField(help_text='Item location', max_length=200)),
                ('contact_phone', models.CharField(blank=True, help_text='Contact phone', max_length=20)),
                ('contact_email', models.EmailField(blank=True, help_text='Contact email', max_length=254)),
                ('is_active', models.BooleanField(default=True, help_text='Whether listing is active')),
                ('views', models.IntegerField(default=0, help_text='Number of views')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='marketplace_items', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MarketplaceImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Item image', upload_to='marketplace_images/')),
                ('caption', models.CharField(blank=True, help_text='Image caption', max_length=200)),
                ('is_primary', models.BooleanField(default=False, help_text='Whether this is the primary image')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('marketplace_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='core.marketplace')),
            ],
            options={
                'ordering': ['-is_primary', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MarketplaceOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=1, help_text='Order quantity')),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Total order amount', max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('shipped', 'Shipped'), ('delivered', 'Delivered'), ('cancelled', 'Cancelled')], default='pending', help_text='Order status', max_length=20)),
                ('shipping_address', models.TextField(blank=True, help_text='Shipping address')),
                ('tracking_number', models.CharField(blank=True, help_text='Tracking number', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('buyer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchases', to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='core.marketplace')),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sales', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MarketplaceReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(help_text='Review rating', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(help_text='Review title', max_length=200)),
                ('comment', models.TextField(help_text='Review comment')),
                ('is_verified_purchase', models.BooleanField(default=True, help_text='Whether this is a verified purchase')),
                ('helpful_votes', models.IntegerField(default=0, help_text='Number of helpful votes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='review', to='core.marketplaceorder')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='marketplace_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Message content')),
                ('is_read', models.BooleanField(default=False, help_text='Whether message has been read')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_messages', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('callout', 'Callout'), ('friend_request', 'Friend Request'), ('message', 'Message'), ('event', 'Event'), ('marketplace', 'Marketplace'), ('other', 'Other')], help_text='Notification type', max_length=20)),
                ('title', models.CharField(help_text='Notification title', max_length=200)),
                ('message', models.TextField(help_text='Notification message')),
                ('is_read', models.BooleanField(default=False, help_text='Whether notification is read')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OpenChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Challenge title', max_length=200)),
                ('description', models.TextField(help_text='Challenge description')),
                ('location', models.CharField(help_text='Challenge location', max_length=200)),
                ('race_type', models.CharField(choices=[('quarter_mile', 'Quarter Mile'), ('eighth_mile', 'Eighth Mile'), ('roll_race', 'Roll Race'), ('dig_race', 'Dig Race'), ('other', 'Other')], help_text='Type of race', max_length=50)),
                ('wager_amount', models.DecimalField(decimal_places=2, default=0, help_text='Wager amount', max_digits=8)),
                ('max_respondents', models.IntegerField(blank=True, help_text='Maximum number of respondents', null=True)),
                ('expires_at', models.DateTimeField(help_text='When challenge expires')),
                ('is_active', models.BooleanField(default=True, help_text='Whether challenge is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('challenger', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='open_challenges_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_type', models.CharField(choices=[('subscription', 'Subscription'), ('marketplace', 'Marketplace'), ('betting', 'Betting'), ('other', 'Other')], help_text='Payment type', max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Payment amount', max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', help_text='Payment status', max_length=20)),
                ('payment_provider', models.CharField(blank=True, help_text='Payment provider', max_length=50)),
                ('transaction_id', models.CharField(blank=True, help_text='Transaction ID', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('test_type', models.CharField(max_length=20)),
                ('test_date', models.DateField()),
                ('track', models.CharField(blank=True, max_length=200)),
                ('weather_conditions', models.CharField(blank=True, max_length=200)),
                ('horsepower', models.IntegerField(blank=True, null=True)),
                ('torque', models.IntegerField(blank=True, null=True)),
                ('rpm_hp_peak', models.IntegerField(blank=True, null=True)),
                ('rpm_torque_peak', models.IntegerField(blank=True, null=True)),
                ('quarter_mile_time', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
                ('quarter_mile_speed', models.DecimalField(blank=True, decimal_places=1, max_digits=5, null=True)),
                ('sixty_foot_time', models.DecimalField(blank=True, decimal_places=3, max_digits=4, null=True)),
                ('three_thirty_time', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True)),
                ('eighth_mile_time', models.DecimalField(blank=True, decimal_places=3, max_digits=5, null=True)),
                ('eighth_mile_speed', models.DecimalField(blank=True, decimal_places=1, max_digits=5, null=True)),
                ('weight', models.IntegerField(blank=True, null=True)),
                ('fuel_type', models.CharField(blank=True, max_length=50)),
                ('tire_type', models.CharField(blank=True, max_length=100)),
                ('dyno_sheet', models.ImageField(blank=True, null=True, upload_to='dyno_sheets/')),
                ('time_slip', models.ImageField(blank=True, null=True, upload_to='time_slips/')),
                ('video', models.FileField(blank=True, null=True, upload_to='performance_videos/')),
                ('notes', models.TextField(blank=True)),
                ('modifications', models.TextField(blank=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_data', to='core.carprofile')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_performance_data', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-test_date'],
            },
        ),
        migrations.CreateModel(
            name='RaceResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('winner_time', models.DecimalField(blank=True, decimal_places=3, help_text="Winner's time", max_digits=6, null=True)),
                ('loser_time', models.DecimalField(blank=True, decimal_places=3, help_text="Loser's time", max_digits=6, null=True)),
                ('winner_speed', models.DecimalField(blank=True, decimal_places=1, help_text="Winner's speed", max_digits=5, null=True)),
                ('loser_speed', models.DecimalField(blank=True, decimal_places=1, help_text="Loser's speed", max_digits=5, null=True)),
                ('completed_at', models.DateTimeField(auto_now_add=True, help_text='When race was completed')),
                ('loser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='race_losses', to=settings.AUTH_USER_MODEL)),
                ('winner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='race_wins', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-completed_at'],
            },
        ),
        migrations.CreateModel(
            name='RacingCrew',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Crew name', max_length=200)),
                ('description', models.TextField(help_text='Crew description')),
                ('logo', models.ImageField(blank=True, help_text='Crew logo', null=True, upload_to='crew_logos/')),
                ('location', models.CharField(help_text='Crew location', max_length=200)),
                ('founded_date', models.DateField(blank=True, help_text='When the crew was founded', null=True)),
                ('is_public', models.BooleanField(default=True, help_text='Whether crew is public')),
                ('is_verified', models.BooleanField(default=False, help_text='Whether crew is verified')),
                ('member_count', models.IntegerField(default=0, help_text='Number of members')),
                ('max_members', models.IntegerField(blank=True, help_text='Maximum number of members', null=True)),
                ('requirements', models.TextField(blank=True, help_text='Requirements to join')),
                ('rules', models.TextField(blank=True, help_text='Crew rules')),
                ('website', models.URLField(blank=True, help_text='Crew website')),
                ('social_media', models.JSONField(blank=True, default=dict, help_text='Social media links')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_crews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subscription_type', models.CharField(choices=[('basic', 'Basic'), ('premium', 'Premium'), ('pro', 'Pro')], help_text='Subscription type', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('cancelled', 'Cancelled'), ('expired', 'Expired')], default='active', help_text='Subscription status', max_length=20)),
                ('start_date', models.DateTimeField(auto_now_add=True, help_text='Subscription start date')),
                ('end_date', models.DateTimeField(blank=True, help_text='Subscription end date', null=True)),
                ('next_billing_date', models.DateTimeField(blank=True, help_text='Next billing date', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Post content')),
                ('image', models.ImageField(blank=True, help_text='Post image', null=True, upload_to='post_images/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('car', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='core.carprofile')),
                ('likes', models.ManyToManyField(blank=True, related_name='liked_posts', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PostComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Comment content')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_comments', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='core.userpost')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, help_text="User's bio or description")),
                ('location', models.CharField(blank=True, help_text="User's location", max_length=200)),
                ('car_make', models.CharField(blank=True, help_text="User's car make", max_length=50)),
                ('car_model', models.CharField(blank=True, help_text="User's car model", max_length=50)),
                ('car_year', models.IntegerField(blank=True, help_text="User's car year", null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('cover_photo', models.ImageField(blank=True, null=True, upload_to='cover_photos/')),
                ('wins', models.IntegerField(default=0, help_text='Number of races won')),
                ('losses', models.IntegerField(default=0, help_text='Number of races lost')),
                ('total_races', models.IntegerField(default=0, help_text='Total number of races')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserWallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('balance', models.DecimalField(decimal_places=2, default=0, help_text='Wallet balance', max_digits=10)),
                ('is_active', models.BooleanField(default=True, help_text='Whether wallet is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='wallet', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='WishlistSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('suggestion', models.TextField()),
                ('alternative_part', models.CharField(blank=True, max_length=200)),
                ('price_info', models.CharField(blank=True, max_length=200)),
                ('source', models.CharField(blank=True, max_length=200)),
                ('is_helpful', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wishlist_suggestions_given', to=settings.AUTH_USER_MODEL)),
                ('wishlist_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='suggestions', to='core.buildwishlist')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BuildBadgeAward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('awarded_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
                ('awarded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badges_awarded', to=settings.AUTH_USER_MODEL)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='awards', to='core.buildbadge')),
                ('build_log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badge_awards', to='core.buildlog')),
            ],
            options={
                'ordering': ['-awarded_at'],
                'unique_together': {('build_log', 'badge')},
            },
        ),
        migrations.CreateModel(
            name='BuildRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creativity', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('execution', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('documentation', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('performance', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('overall', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('build_log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='core.buildlog')),
                ('rater', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='build_ratings_given', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('build_log', 'rater')},
            },
        ),
        migrations.CreateModel(
            name='EventParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('registration_date', models.DateTimeField(auto_now_add=True, help_text='When user registered')),
                ('is_confirmed', models.BooleanField(default=False, help_text='Whether participation is confirmed')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='core.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_participations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['registration_date'],
                'unique_together': {('event', 'user')},
            },
        ),
        migrations.CreateModel(
            name='Friendship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('blocked', 'Blocked')], default='pending', help_text='Friendship status', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendship_requests_received', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendship_requests_sent', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('sender', 'receiver')},
            },
        ),
        migrations.CreateModel(
            name='ChallengeResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(blank=True, help_text='Response message')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', help_text='Response status', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('respondent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenge_responses', to=settings.AUTH_USER_MODEL)),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='core.openchallenge')),
            ],
            options={
                'ordering': ['created_at'],
                'unique_together': {('challenge', 'respondent')},
            },
        ),
        migrations.CreateModel(
            name='CrewMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('member', 'Member'), ('officer', 'Officer'), ('leader', 'Leader'), ('founder', 'Founder')], default='member', help_text='Member role', max_length=50)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('active', 'Active'), ('inactive', 'Inactive'), ('banned', 'Banned')], default='pending', help_text='Membership status', max_length=20)),
                ('joined_at', models.DateTimeField(auto_now_add=True, help_text='When member joined')),
                ('notes', models.TextField(blank=True, help_text='Admin notes')),
                ('invited_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='crew_invitations_sent', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='crew_memberships', to=settings.AUTH_USER_MODEL)),
                ('crew', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='core.racingcrew')),
            ],
            options={
                'ordering': ['joined_at'],
                'unique_together': {('crew', 'user')},
                'verbose_name': 'Crew Membership',
                'verbose_name_plural': 'Crew Memberships',
            },
        ),
        migrations.CreateModel(
            name='ReputationRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('punctuality', models.IntegerField(help_text='Punctuality rating (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('rule_adherence', models.IntegerField(help_text='Rule adherence rating (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('sportsmanship', models.IntegerField(help_text='Sportsmanship rating (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('overall', models.IntegerField(help_text='Overall rating (1-5)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(blank=True, help_text='Optional comment about the experience')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('callout', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='core.callout')),
                ('rated_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings_received', to=settings.AUTH_USER_MODEL)),
                ('rater', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings_given', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('rater', 'rated_user', 'callout')},
            },
        ),
    ]
